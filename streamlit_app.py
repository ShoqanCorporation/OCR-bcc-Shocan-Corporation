import streamlit as st
import json
from extractor import process_document # –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º–ø–æ—Ä—Ç
from validator import validate_date, validate_amount
import cv2

st.set_page_config(page_title="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π OCR 2.0", layout="wide")
st.title("üöÄ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π OCR 2.0 –¥–ª—è –î–æ–∫—É–º–µ–Ω—Ç–æ–≤")

uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (JPG, PNG, PDF, XLSX)", 
    type=["png", "jpg", "jpeg", "pdf", "xlsx"]
)
use_gemini_checkbox = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Gemini –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", value=True)

if uploaded_file is not None:
    file_bytes = uploaded_file.getvalue()
    file_name = uploaded_file.name
    
    col1, col2 = st.columns(2)
    
    with col2:
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):

            extracted_data, ocr_details, images_found = process_document(file_name, file_bytes, use_gemini_checkbox)
            
            st.subheader("–ü–æ–ª–Ω—ã–π –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (digital + OCR)")
            st.text_area("Merged Text", ocr_details.get("merged_text", ""), height=250)
            
            st.subheader("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–æ–ª—è (JSON)")
            st.json(extracted_data)

            st.subheader("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π")
            if extracted_data and "error" not in extracted_data:
                st.info(f"–î–∞—Ç–∞: {validate_date(extracted_data.get('date'))}")
                st.info(f"–°—É–º–º–∞: {validate_amount(extracted_data.get('amount'))}")
            else:
                st.error("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")

    with col1:
        st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if file_name.lower().endswith('.pdf'):
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω PDF-—Ñ–∞–π–ª: {file_name}")
            st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å):")
        elif file_name.lower().endswith('.xlsx'):
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω Excel-—Ñ–∞–π–ª: {file_name}")
            st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å):")
        
        if images_found:
            for i, img_cv in enumerate(images_found):
                st.image(cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB), caption=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")
        elif file_name.lower().endswith(('.png', '.jpg', '.jpeg')):
             st.image(file_bytes, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        else:
            st.info("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")